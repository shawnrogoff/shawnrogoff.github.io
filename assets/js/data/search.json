[ { "title": "Javascript Code Snippets", "url": "/posts/JavaScriptSnippets/", "categories": "docs", "tags": "snippets, code", "date": "2022-08-29 10:00:00 -0500", "snippet": "Useful Javascript Code Snippets I’ve Used:convert a javascript object to camelCase with recursion:let formattedObject = this.toCamel(notFormattedObject);toCamel(o) { let newO, origKey, newKey, value if (o instanceof Array) { return o.map(function(value) { if (typeof value === \"object\") { value = this.toCamel(value) } return value }) } else { newO = {} for (origKey in o) { if (o.hasOwnProperty(origKey)) { newKey = (origKey.charAt(0).toLowerCase() + origKey.slice(1) || origKey).toString() value = o[origKey] if (value instanceof Array || (value !== null &amp;&amp; value.constructor === Object)) { value = this.toCamel(value) } newO[newKey] = value } } } return newO }Only allow numbers or letters in a text field:&lt;input matInput type=\"text\" class=\"text-dark\" (input)=\"onEnterStoreNumber($event)\" placeholder=\"Store Number\" matTooltip=\"Enter store number.\" autocomplete=\"off\" maxlength=\"3\" ngModel (keypress)=\"keyPressNumbersOnly($event)\"&gt; keyPressNumbersOnly(event) { let charCode = (event.which) ? event.which : event.keyCode; // Only Numbers 0-9 if ((charCode &lt; 48 || charCode &gt; 57)) { event.preventDefault(); return false; } else { return true; } } keyPressAllowLettersOnly(event) { let input = String.fromCharCode(event.keyCode); if (/[a-zA-Z]/.test(input)) { return true; } else { event.preventDefault(); return false; } }Check if a variable has a value (strips spaces to check empty strings)stringPropertyHasAValue(property) { // strip a variable number of spaces to test if it's truthy if (property) { property = property.replace(/\\s/g, ''); } if(property) { return true; } else { return false; }}Format a datefunction padTo2Digits(num) { return num.toString().padStart(2, '0');}function formatDate(date) { return ( [ date.getFullYear(), padTo2Digits(date.getMonth() + 1), padTo2Digits(date.getDate()), ].join('-') + ' ' + [ padTo2Digits(date.getHours()), padTo2Digits(date.getMinutes()), padTo2Digits(date.getSeconds()), ].join(':') );}// 2021-10-24 16:21:23 (yyyy-mm-dd hh:mm:ss)console.log(formatDate(new Date()));" }, { "title": "Angular Code Snippets", "url": "/posts/AngularSnippets/", "categories": "docs", "tags": "snippets, code", "date": "2022-08-29 10:00:00 -0500", "snippet": "Useful Angular Code Snippets I’ve Used:Create new project with routing, and no test files:ng new &lt;project-name&gt; --routing --skip-testsImport/Add Bootstrap:npm install bootstrap// in style.css@import \"~bootstrap/dist/css/bootstrap.css\";Build project:npm run buildAdd Angular Materials:ng add @angular/material// Add to the app.module.ts fileimport { BrowserModule } from '@angular/platform-browser';import { NgModule } from '@angular/core';import { AppComponent } from './app.component';//Angular Material Componentsimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';import {MatCheckboxModule} from '@angular/material/checkbox';import {MatButtonModule} from '@angular/material/button';import {MatInputModule} from '@angular/material/input';import {MatAutocompleteModule} from '@angular/material/autocomplete';import {MatDatepickerModule} from '@angular/material/datepicker';import {MatFormFieldModule} from '@angular/material/form-field';import {MatRadioModule} from '@angular/material/radio';import {MatSelectModule} from '@angular/material/select';import {MatSliderModule} from '@angular/material/slider';import {MatSlideToggleModule} from '@angular/material/slide-toggle';import {MatMenuModule} from '@angular/material/menu';import {MatSidenavModule} from '@angular/material/sidenav';import {MatToolbarModule} from '@angular/material/toolbar';import {MatListModule} from '@angular/material/list';import {MatGridListModule} from '@angular/material/grid-list';import {MatCardModule} from '@angular/material/card';import {MatStepperModule} from '@angular/material/stepper';import {MatTabsModule} from '@angular/material/tabs';import {MatExpansionModule} from '@angular/material/expansion';import {MatButtonToggleModule} from '@angular/material/button-toggle';import {MatChipsModule} from '@angular/material/chips';import {MatIconModule} from '@angular/material/icon';import {MatProgressSpinnerModule} from '@angular/material/progress-spinner';import {MatProgressBarModule} from '@angular/material/progress-bar';import {MatDialogModule} from '@angular/material/dialog';import {MatTooltipModule} from '@angular/material/tooltip';import {MatSnackBarModule} from '@angular/material/snack-bar';import {MatTableModule} from '@angular/material/table';import {MatSortModule} from '@angular/material/sort';import {MatPaginatorModule} from '@angular/material/paginator';@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, BrowserAnimationsModule, MatCheckboxModule, MatButtonModule, MatInputModule, MatAutocompleteModule, MatDatepickerModule, MatFormFieldModule, MatRadioModule, MatSelectModule, MatSliderModule, MatSlideToggleModule, MatMenuModule, MatSidenavModule, MatToolbarModule, MatListModule, MatGridListModule, MatCardModule, MatStepperModule, MatTabsModule, MatExpansionModule, MatButtonToggleModule, MatChipsModule, MatIconModule, MatProgressSpinnerModule, MatProgressBarModule, MatDialogModule, MatTooltipModule, MatSnackBarModule, MatTableModule, MatSortModule, MatPaginatorModule ], providers: [], bootstrap: [AppComponent]})export class AppModule { }Save Angular Materials icons locally so internet isn’t necessarynpm install material-design-icons -save// Add to your style.css file@import '~material-design-icons/iconfont/material-icons.css';Add a new component:ng g c &lt;componentName&gt;Add a new module:ng g m &lt;name&gt;Add a new service (without spec.ts file)ng generate s security-watch --skip-tests&lt;/br&gt;Angular Materials Styling Examples:.mat-button-toggle { background-color: lightgray; color: rgb(43, 43, 43); font-weight: normal;}.mat-button-toggle-checked { background-color: #5882b9; color: #fff; font-weight: normal;}::ng-deep .mat-focused .mat-form-field-label { /*change color of label*/ color: #343a40 !important; }::ng-deep .mat-form-field-label { /*change color of label*/ color: #343a40 !important; }::ng-deep.mat-form-field-underline { /*change color of underline*/ background-color: #343a40 !important; }::ng-deep.mat-form-field-ripple { /*change color of underline when focused*/ background-color: #343a40 !important; }::ng-deep.mat-input-element.mat-form-field-autofill-control { background-color: transparent !important;}::ng-deep.mat-select-arrow{ color: #343a40 !important;}::ng-deep.mat-form-field-underline:before{ background-color: #343a40 !important; }.mat-option { color: #545454 !important; background: lightgray !important;}.mat-option.mat-active { background: #343a40 !important; color: #FFF !important;}:host /deep/ .mat-select-value-text { color: #343a40 !important;}&lt;/br&gt;Angular Guides/Walkthroughs:Send update a variable’s value in parent component from the child component:In child component .ts file: Import the Output and EventEmitter interfaces from @angular/core Add this line:@Output() &lt;eventName&gt; = new EventEmitter&lt;eventValueType&gt;();// eventValueType would be string, number, class, boolean, etc. Add a function to emit the event: newRequestEventFunction(value: &lt;eventValueType&gt;) {this.&lt;eventName&gt;.emit(value);} In child component .html file: For text inputs: &lt;input type=\"text\" #templateReferenceVariable&gt;&lt;button (click)=\"newRequestEventFunction(templateReferenceVariable.value)\"&gt;&lt;/button&gt; In my original case I wanted to toggle a parent variable from true to false, so I just did a click event like: &lt;button (click)=\"newRequestEventFunction(false)\"&gt;&lt;/button&gt; In parent component .ts file: Create a variable you’re going to be updating: variableToUpdate = true; Create a function that updates that variable: updateVariableToUpdate(value: eventValueType) {this.variableToUpdate = value;} In parent component .html file: &lt;app-childComponentTag (eventName)=\"updateVariableToUpdate($event)\"&gt;&lt;/app-childComponentTag&gt;Useful Youtube Video On This SubjectCall function on mat-select change:&lt;mat-select (selectionChange)=\"functionName()\"&gt;&lt;/mat-select&gt;Angualar Debugging:I added a service to a constructor, and now my page doesn't render:Try adding HttpClientModule to app.module.ts (import at the top, and include in imports inside @NgModule())." }, { "title": "Useful Commands I've Used", "url": "/posts/UsefulCommands/", "categories": "docs", "tags": "commands, environment", "date": "2022-08-23 11:00:00 -0500", "snippet": "Save Environment Variable On Your MachineThis could be useful to save Jwt Token KEY locally. Remember to make a note to do the same on host machine. Open Command Prompt as Admin run command: setx KEY “&lt;key value&gt;” /M**The /M makes it a system variable, and not localTo retrieve this value (in C#):var key = Environment.GetEnvironmentVarialbe(\"KEY\");Entity FrameworkMigrations &amp; Database Updates:dotnet ef migrations add &lt;MigrationName&gt;dotnet ef database update" }, { "title": "Picking A Demo Project", "url": "/posts/PickingADemoProject/", "categories": "blog", "tags": "demo, project, advice", "date": "2022-08-23 11:00:00 -0500", "snippet": "Picking A Demo ProjectThe Situation:You’re looking for a job in technology, and want to impress a potential hiring manger/recruiter. Maybe you’re partaking in a local coding bootcamp, and are expected to build and demo a project at the conclusion of your educational experience. “What should a demo project look like? What should it include, and what should it be able to do?” First of all, I recommend anyone asking these questions to view this video by a bootcamp out of North Carolina, Coder Foundry:The 1 Coding Project Idea Guaranteed To Get You A Software Development JobI agree whole-heartedly with what Bobby has to say in the video. Your project should: Use design patterns (such as MVC) to structure your project. Build a professional user interface/graphical user interface. A bootstrap template can really help you with this. Include a database, and implement all CRUD operations (create, read, update, delete). Include security by implementing authentication and authorization, and by avoiding common mistakes that can lead to SQL injection attacks along with other general security risks. Solve a business problem. The idea here is simple: build a project a hiring manager will recognize as something they use/have used professionally. If your application solves a business problem, then you will immediately appear more professional.When I went through the Arkansas Coding Academy in 2021, I was tasked with creating a project for our demo day. I followed the above tips, and created an application that handled the customer and job tracking for a hypothetical jewelry store. Many/most/all companies have some way of tracking who their customers are, when they came in to have something done, what they paid, how long it took, etc. I solved this problem with my project choice.Once you have a project idea in mind, you start the planning process and get things done. Keep in mind that building the project is just half the battle. You should fully understand every line of code in your project, and be able to explain what you did and why to a hiring manager. You never know what might come up in the interview! “On line 250 here you added this line of code. Why was that necessary?” Be ready for anything." }, { "title": "New Post Doc", "url": "/posts/NewPosts/", "categories": "docs", "tags": "doc, newpost, post, markdown", "date": "2022-08-21 11:00:00 -0500", "snippet": "Documentation: Create A Post Via Jekyll ThemeResources:Official DocumentationVideo Setup GuideMarkdown Cheat SheetProblems I've Ran Into (So Far)New docs/blogs are added to the _posts folder, and should be a .md filetype (for markdown). &lt;/br&gt;You must name the file with a specific format: YYYY-MM-DD-TITLE.md. Failure to follow this format will result in posts not showing up! All posts require header information:-– title: &lt;title&gt; date: 2022-08-14 11:00:00 -500 categories: [docs, blog] tags: [doc, newpost, post, markdown] # TAG names should always be lowercase -–If you set the publish date/time for the future, it will be skipped during the deployment steps and will not show up in the repo’s gh-pages branch despite being present in the repo’s main branch.Errors with theme not deploying properlyRun this locally: bundle lock –add-platform x86_64-linuxThen commit changes to your remote repo. It should create a gh-pages branch automatically, and then you just set that as your GitHub page in the settings." }, { "title": "LINQ Queries", "url": "/posts/LINQ/", "categories": "docs", "tags": "linq, entity framework, ef", "date": "2022-08-21 11:00:00 -0500", "snippet": "Documentation: LINQ Queries with Entity FrameworkThis documentation covers general LINQ database queries. Throughout these examples we are using the Microsoft Northwind Database for demo purposes. The _context is our DbContext implementation, and is used throughout. All queries are shown asynchronously, and results are returned via a return Ok(results) statement. We will be passing in customerId and later employeeId as search parameters.This documentation is organized in a way that shows the T SQL version of a query, and then a few ways of replicating it with LINQ.Return all columns and rows from a table:SQL Example:SELECT * FROM dbo.Orders;LINQ Versions:var result = await _context.Orders.ToListAsync();// ORvar result = await ( from orders in _context.Orders select orders) .ToListAsync();Return specific columns and all rows from a table:SQL Example:SELECT OrderId, CustomerId, EmployeeId, OrderDate FROM dbo.Orders;LINQ Versions:var result = await _context.Orders\t.Select(o =&gt; new { o.OrderId, o.CustomerId, o.EmployeeId, o.OrderDate })\t.ToListAsync();// ORvar result = await ( from orders in _context.Orders\tselect new\t{\t\tOrderId = orders.OrderId,\t\tCustomerId = orders.CustomerId,\t\tEmployeeId = orders.EmployeeId,\t\tOrderDate = orders.OrderDate\t}) .ToListAsync();Return all columns from a table based on a customerId:SQL Example:SELECT * FROM dbo.Orders WHERE CustomerId = @CustomerId;LINQ Versions:var result = await _context.Orders\t.Where(o =&gt; o.CustomerId == customerId)\t.ToListAsync();// ORvar result = await (\tfrom orders in _context.Orders\twhere orders.CustomerId == customerId\tselect orders)\t.ToListAsync();Return the top three records with specific columns from a table based on a customerId. Order by OrderDate descending:SQL Example:SELECT TOP(3) OrderId, CustomerId, EmployeeId, OrderDateFROM OrdersWHERE CustomerId = @CustomerIdORDER BY OrderDate DESC;LINQ Versions:var result = await _context.Orders\t.Where(o =&gt; o.CustomerId == customerId)\t.OrderByDescending(o =&gt; o.OrderDate)\t.Select(o =&gt; new\t{\t\to.OrderId, o.CustomerId, o.EmployeeId, o.OrderDate\t})\t.Take(3)\t.ToListAsync();// ORvar result = await (\tfrom orders in _context.Orders\twhere orders.CustomerId == customerId\torderby orders.OrderDate descending\tselect new {\t OrderId = orders.OrderId,\t\tCustomerId = orders.CustomerId,\t\tEmployeeId = orders.EmployeeId,\t\tOrderDate = orders.OrderDate\t})\t.Take(3)\t.ToListAsync();Return specific columns for records matching two parameters:SQL Example:SELECT OrderId, OrderDate FROM OrdersWHERE CustomerId = @CustomerId AND EmployeeId = @EmployeeId;LINQ Versions:var result = await _context.Orders\t.Where(o =&gt; o.customerId == customerId\t\t&amp;&amp; o.EmployeeId == employeeId)\t.Select(o =&gt; new\t{\t\to.OrderId, o.OrderDate\t})\t.ToListAsync();// ORvar result = await (\tfrom orders in _context.Orders\twhere orders.CustomerId == customerId\t&amp;&amp; orders.EmployeeId == employeeId\tselect new\t{\t\torders.OrderId, orders.OrderDate\t})\t.ToListAsync();Return specific columns from two tables that match a parameter (inner join), and order by a column descending:SQL Example:SELECT o.OrderId, o.CustomerId, o.EmployeeId, o.OrderDate, c.CompanyName, c.Address, c.PhoneFROM Orders oJOIN Customers cON o.CustomerId = c.CustomerIdWHERE o.CustomerId = @CustomerIdORDER BY o.OrderDate DESC;LINQ Versions:var results = \tawait _context.Orders\t.Where(o =&gt; o.CustomerId == customerId)\t.Join(\t\t_context.Customers,\t\torder =&gt; customer.CustomerId,\t\t(order, customer) =&gt; new\t\t{\t\t\torder.OrderId, order.CustomerId, order.OrderDate, customer.CompanyName, customer.Address, customer.Phone\t\t})\t.OrderByDescending(o =&gt; o.OrderDate)\t.ToListAsync();// ORvar results = await ( from order in _context.Orders\tjoin customer in _context.Customers on order.CustomerId equals customer.CustomerId\twhere order.CustomerId == customerId\torderby order.OrderDate descending\tselect new CustomerAndOrderInformation()\t{\t\tOrderId = orders.OrderId,\t\tCustomerId = orders.CustomerId,\t\tOrderDate = orders.OrderDate,\t\tCompanyName = customer.CompanyName,\t\tAddress = customer.Address,\t\tPhone = customer.Phone\t}).ToListAsync();**Notice the second example returns a specific class we might create to capture this data. Otherwise it will be an anonymous object.**Return specific columns from three tables that match a parameter (inner join), and order by OrderDate descending:SQL Example:SELECT o.OrderId,\t o.CustomerId,\t o.OrderDate,\t c.CompanyName,\t c.Address,\t c.Phone,\t od.ProductID,\t (od.UnitPrice * od.Quantity) as OrderTotalFROM dbo.Orders oJOIN dbo.Customers cON o.CustomerId = c.CustomerIdJOIN dbo.[Order Details] odON o.OrderID = od.OrderIDWHERE o.CustomerId = @CustomerIdORDER BY o.OrderDate DESC;LINQ Versions:var results = await ( from order in _context.Orders join customer in _context.Customers on order.CustomerId equals customer.CustomerId join orderDetail in _context.OrderDetails on order.OrderId equals orderDetail.OrderId where order.CustomerId == customerId orderby order.OrderDate descending select new { OrderId = order.OrderId, CustomerId = order.CustomerId, OrderDate = order.OrderDate, CompanyName = customer.CompanyName, Address = customer.Address, Phone = customer.Phone, ProductId = orderDetail.ProductId, OrderTotal = (orderDetail.UnitPrice * \t orderDetail.Quantity) }).ToListAsync();// ORvar results = await _context.Customers .Where(c =&gt; c.CustomerId == customerId) .Join( _context.Orders, c =&gt; c.CustomerId, o =&gt; o.CustomerId, (c, o) =&gt; new { c, o }) .Join( _context.OrderDetails, co =&gt; co.o.OrderId, od =&gt; od.OrderId, (co, od) =&gt; new { co, od }) .Select(result =&gt; new { result.co.o.OrderId, result.co.c.CustomerId, result.co.o.OrderDate, result.co.c.CompanyName, result.co.c.Address, result.co.c.Phone, result.od.ProductId, orderTotal = (result.od.Quantity * \t\t\tresult.od.UnitPrice) }) .OrderByDescending(o =&gt; o.OrderDate) .ToListAsync();// ORvar results = await _context.Customers .Where(c =&gt; c.CustomerId == customerId) .Join( _context.Orders, c =&gt; c.CustomerId, o =&gt; o.CustomerId, (c, o) =&gt; new { c, o }) .Join( _context.OrderDetails, co =&gt; co.o.OrderId, od =&gt; od.OrderId, (co, od) =&gt; new { co, od }) .Select(result =&gt; new CustomerOrderOrderDetails() { OrderId = result.co.o.OrderId, CustomerId = result.co.c.CustomerId, OrderDate = result.co.o.OrderDate, CompanyName = result.co.c.CompanyName, Address = result.co.c.Address, Phone = result.co.c.Phone, ProductId = result.od.ProductId, OrderTotal = (result.od.Quantity * \t\t\tresult.od.UnitPrice) }) .OrderByDescending(o =&gt; o.OrderDate) .ToListAsync();**Again here we show the option of returning an anonymous object or a pre-determined class object.** --THIS DOCUMENTATION IS NOT COMPLETE--" } ]
